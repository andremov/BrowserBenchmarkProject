{"version":3,"sources":["Components/Start.js","Components/TestComponents/DropShadowComponent.js","Components/End.js","Components/TestComponents/TranslateComponent.js","Components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Start","action","event","preventDefault","props","doStart","className","onClick","this","Component","attempts","style","DropShadowComponent","context","swapStyle","setTimeout","defTimer","End","doEnd","TranslateComponent","testLength","tests","name","MainComponent","state","currentTest","progress","handleProgress","p","t","length","setState","firstTest","restart","setInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAEaA,EAAb,2MACIC,OAAS,SAAAC,GACLA,EAAMC,iBAEN,EAAKC,MAAMC,WAJnB,wEAQQ,OACI,yBAAKC,UAAU,QACX,yBAAKC,QAASC,KAAKP,OAAQK,UAAU,OAArC,cAVhB,GAA2BG,aCEvBC,EAAW,EACXC,GAAQ,EAGCC,EAAb,YAEI,WAAYR,EAAOS,GAAU,IAAD,8BACxB,4CAAMT,EAAOS,KAKjBC,UAAY,YAERH,GAASA,IAGLD,IAGa,IAAbA,GACAK,WAAW,EAAKD,UAAWE,IAZ/BD,WAAW,EAAKD,UAAWE,GAHH,EAFhC,sEAsBQ,OACI,yBAAKV,UAAU,QACX,yBAAKA,UAAW,UAAUK,EA1B/B,eA0B6C,WAxBxD,GAAyCF,aCN5BQ,EAAb,2MACIhB,OAAS,SAAAC,GACLA,EAAMC,iBAEN,EAAKC,MAAMc,SAJnB,wEAQQ,OACI,yBAAKZ,UAAU,QAAf,YAGI,yBAAKC,QAASC,KAAKP,OAAQK,UAAU,OAArC,aAZhB,GAAyBG,aCErBC,EAAW,EACXC,GAAQ,EAGCQ,EAAb,YAEI,WAAYf,EAAOS,GAAU,IAAD,8BACxB,4CAAMT,EAAOS,KAKjBC,UAAY,YAERH,GAASA,IAGLD,IAGa,IAAbA,GACAK,WAAW,EAAKD,UAAWE,IAZ/BD,WAAW,EAAKD,UAAWE,GAHH,EAFhC,sEAsBQ,OACI,yBAAKV,UAAU,QACX,yBAAKA,UAAW,UAAUK,EA1B/B,aA0B6C,WAxBxD,GAAwCF,aCH3BO,EAAW,KAElBI,EAAa,GACbC,EAAQ,CACV,CACEC,KAAO,IAET,CACIA,KAAO,oBAEX,CACIA,KAAO,2BAEX,CACIA,KAAO,KAIFC,EAAb,2MAEIC,MAAQ,CACJC,YAAc,EACdC,SAAW,GAJnB,EAWIC,eAAiB,WACb,IAAIC,EAAI,EAAKJ,MAAME,SACfG,EAAI,EAAKL,MAAMC,YACT,IAANI,GAAWA,IAAMR,EAAMS,OAAO,IAC1BF,GAAKR,IACLS,IACAD,GAAK,GAET,EAAKG,SAAS,CACVL,SAAUE,EAAI,EACdH,YAAaI,MArB7B,EA0BIG,UAAY,WACR,IAAIH,EAAI,EAAKL,MAAMC,YACnB,EAAKM,SAAS,CACVL,SAAW,EACXD,YAAcI,EAAE,KA9B5B,EAkCII,QAAU,WACN,EAAKF,SAAS,CACVL,SAAW,EACXD,YAAc,KArC1B,mFAQQS,YAAY1B,KAAKmB,eAAe,OARxC,+BAyCc,IAAD,EACmCnB,KAAKgB,MAA3BI,EADb,EACEF,SAA4BG,EAD9B,EACgBJ,YAErB,OACI,6BACI,yBAAKnB,UAAU,UACX,0BAAMA,UAAU,SAAhB,qBACO,IAANuB,GAAWA,IAAMR,EAAMS,OAAO,EAC3B,0BAAMxB,UAAU,YAAYuB,EAAI,KAAOR,EAAMQ,GAAGP,MAChD,IAKE,IAANO,EAAU,kBAAC,EAAD,CAAOxB,QAASG,KAAKwB,YACrB,IAANH,EAAU,kBAAC,EAAD,MACA,IAANA,EAAU,kBAAC,EAAD,MACV,kBAAC,EAAD,CAAKX,MAAOV,KAAKyB,UAG7B,yBAAK3B,UAAU,MAAMK,MAAO,CAAC,MAAaiB,EAAER,EAAY,IAAK,MACzD,yBAAKd,UAAU,mBA9DnC,GAAmCG,aCbpB0B,MANf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.efec97ea.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport class Start extends Component {\r\n    action = event => {\r\n        event.preventDefault();\r\n\r\n        this.props.doStart();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"test\">\r\n                <div onClick={this.action} className=\"btn\">\r\n                    Start\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport {defTimer} from \"../MainComponent\";\r\n\r\nlet attempts = 3;\r\nlet style = false;\r\nlet test = ' drop-shadow';\r\n\r\nexport class DropShadowComponent extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        setTimeout(this.swapStyle, defTimer);\r\n    }\r\n\r\n    swapStyle = () => {\r\n\r\n        style = !style;\r\n\r\n        if (!style) {\r\n            attempts --;\r\n        }\r\n\r\n        if (attempts !== 0) {\r\n            setTimeout(this.swapStyle, defTimer);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"test\">\r\n                <div className={'object'+(style? test : '')}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport class End extends Component {\r\n    action = event => {\r\n        event.preventDefault();\r\n\r\n        this.props.doEnd();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"test\">\r\n                Finished.\r\n\r\n                <div onClick={this.action} className=\"btn\">\r\n                    Back\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport {defTimer} from \"../MainComponent\";\r\n\r\nlet attempts = 3;\r\nlet style = false;\r\nlet test = ' translate';\r\n\r\nexport class TranslateComponent extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        setTimeout(this.swapStyle, defTimer);\r\n    }\r\n\r\n    swapStyle = () => {\r\n\r\n        style = !style;\r\n\r\n        if (!style) {\r\n            attempts --;\r\n        }\r\n\r\n        if (attempts !== 0) {\r\n            setTimeout(this.swapStyle, defTimer);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"test\">\r\n                <div className={'object'+(style? test : '')}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Start} from \"./Start\";\r\nimport {DropShadowComponent} from \"./TestComponents/DropShadowComponent\";\r\nimport {End} from \"./End\";\r\nimport {TranslateComponent} from \"./TestComponents/TranslateComponent\";\r\nexport const defTimer = 2500;\r\n\r\nconst testLength = 15;\r\nconst tests = [\r\n    {\r\n      name : ''\r\n    },\r\n    {\r\n        name : 'Drop Shadow Test',\r\n    },\r\n    {\r\n        name : 'TranslateComponent Test',\r\n    },\r\n    {\r\n        name : ''\r\n    }\r\n];\r\n\r\nexport class MainComponent extends Component {\r\n\r\n    state = {\r\n        currentTest : 0,\r\n        progress : 0\r\n    };\r\n\r\n    componentDidMount() {\r\n        setInterval(this.handleProgress,1000)\r\n    }\r\n\r\n    handleProgress = () => {\r\n        let p = this.state.progress;\r\n        let t = this.state.currentTest;\r\n        if (t !== 0 && t !== tests.length-1) {\r\n            if (p >= testLength) {\r\n                t++;\r\n                p = -1;\r\n            }\r\n            this.setState({\r\n                progress: p + 1,\r\n                currentTest: t\r\n            });\r\n        }\r\n    };\r\n\r\n    firstTest = () => {\r\n        let t = this.state.currentTest;\r\n        this.setState({\r\n            progress : 0,\r\n            currentTest : t+1\r\n        });\r\n    };\r\n\r\n    restart = () => {\r\n        this.setState({\r\n            progress : 0,\r\n            currentTest : 0\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {progress : p, currentTest : t} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className='header'>\r\n                    <span className='title'>Browser Benchmark</span>\r\n                    {t !== 0 && t !== tests.length-1 ?\r\n                        <span className='subtitle'>{t + '. ' + tests[t].name}</span> :\r\n                        ''\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    t === 0 ? <Start doStart={this.firstTest}/> :\r\n                        t === 1 ? <DropShadowComponent /> :\r\n                            t === 2 ? <TranslateComponent /> :\r\n                            <End doEnd={this.restart}/>\r\n                }\r\n\r\n                <div className='bar' style={{\"width\" : (((p/testLength)*100)+'%')}}>\r\n                    <div className='progress'>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {MainComponent} from \"./Components/MainComponent\";\n\nfunction App() {\n  return (\n      <MainComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}